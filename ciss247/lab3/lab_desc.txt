Objective

 1.   Practice in bit manipulation of integers in the C programming language.

Submitting Your Work

Save your C program file as bits.c and submit it and your report via the Lab Exercise 3 Submission item on the course web site.  You must submit your program by 11:59 PM two days after your scheduled lab session.
Introduction

Your task for this lab exercise is to complete several function definitions which solve puzzles, using only a limited set of operators in the C language.  In addition, you must write a main() function which calls each of your solution functions to demonstrate that each function performs as specified.

For full points in this lab exercise, you must successfully complete any four of the functions, as well as the main function.
Coding Rules

Replace the "return" statement in each function with one or more lines of C code that implements the function. Your code must conform to the following style:

  int Funct(arg1, arg2, ...) {

      /* brief description of how your implementation works */

      int var1 = Expr1;

      ...

      int varM = ExprM;

 

      varJ = ExprJ;

      ...

      varN = ExprN;

      return ExprR;

  }

 

Each "Expr" is an expression using ONLY the following:

    Integer constants 0 through 255 (0xFF), inclusive. You are not allowed to use big constants such as 0xffffffff.
    Function arguments and local variables (no global variables).
    Unary integer operations ! ~
    Binary integer operations & ^ | + << >>

Some of the problems restrict the set of allowed operators even further.

Each "Expr" may consist of multiple operators. You are not restricted to one operator per line.

You are expressly forbidden to:

    Use any control constructs such as if, do, while, for, switch, etc.
    Define or use any macros.
    Define any additional functions in this file.
    Call any functions.
    Use any other operations, such as &&, ||, -, or ?:
    Use any form of casting.
    Use any data type other than int. This implies that you cannot use arrays, structs, or unions.

You may assume that your machine:

    Uses 2s complement, 32-bit representations of integers.
    Performs right shifts arithmetically.
    Has unpredictable behavior when shifting an integer by more than the word size.

EXAMPLE OF ACCEPTABLE CODING STYLE:

  /*

   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31

   */

  int pow2plus1(int x) {

     /* exploit ability of shifts to compute powers of 2 */

     return (1 << x) + 1;

  }
The Functions

    Write a function to compute the bit-wise AND of two integers, using only the ~ and |

int func1(int x, int y);

For example, func1(5, 6) equals 4.  (0101 & 0110 = 0100)

    Write a function to compute the bit-wise exclusive-or of two integers, using only the ~ and & operators.

int func2(int x, int y);

For example, func2(4, 5) equals 1.  (0100 ^ 0101 = 0001).

    Write a function to return 1 if any odd-numbered bit in an integer is set to 1, and return 0 otherwise. (The least significant bit is bit number 0).

int func3(int x);

For example, func3(0x5) should return 0, func3(0x7) should return 1

    Write a function to return 1 if all the odd-numbered bits in an integer are set to 1, and return 0 otherwise.

int func4(int x);

For example, func4(0xFFFFFFFD) should return 0, func4(0xAAAAAAAA) should return 1

    Write a function to return a bit-mask with all 1's between lowbit and highbit, inclusive. Assume 
    0 <= lowbit <= 31, and 0 <= highbit <= 31.  If lowbit > highbit, then mask should be all 0's.

int func5(int highbit, int lowbit);

For example, func5(5, 3) should return 56 (0x38 = 00111000)

    Write a function to swap the mth byte and the nth byte of an integer. You may assume that 0 <= n <= 3, 
    0 <= m <= 3.

int func6(int x, int m, int n);

For example, func6(0x12345678, 1, 3) should return 0x56341278 and func6(0xDEADBEEF, 0, 2) should return 0xDEEFBEAD

 

MAIN Program

Note that for this lab there is no template Lab3.c file.  You will need to make your own.  

The main() function should provide the necessary values to demonstrate the correct performance of your functions, and present results.  In printing, it is most useful to print the int variables in their hexadecimal form.  I.e. 0x56341278 - use the proper formatting in the printf.

 

Submit

Your program and report.